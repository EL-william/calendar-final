import React, { useState } from "react";
import { Button, Input } from "../../shared/ui";
import { Typography } from "../../shared/Typography/Typography";
import { testApiConnection, checkServerHealth } from "../../shared/api/testApi";
import {
  diagnoseApiConnection,
  testSpecificEndpoint,
} from "../../shared/api/diagnostics";
import styles from "./ApiTester.module.scss";

export const ApiTester: React.FC = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [results, setResults] = useState<string[]>([]);
  const [customEndpoint, setCustomEndpoint] = useState(
    "http://localhost:8080/auth/api/v1/register",
  );

  const addResult = (message: string) => {
    setResults((prev) => [
      ...prev,
      `${new Date().toLocaleTimeString()}: ${message}`,
    ]);
  };

  const clearResults = () => {
    setResults([]);
  };

  const handleTestConnection = async () => {
    setIsLoading(true);
    addResult("üîç –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API...");

    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
      const serverOk = await checkServerHealth();
      if (serverOk) {
        addResult("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω!");
      } else {
        addResult("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ health endpoint –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç");
      }

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      const apiOk = await testApiConnection();
      if (apiOk) {
        addResult("‚úÖ API —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!");
      } else {
        addResult("‚ùå API —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç");
      }
    } catch (error) {
      addResult(`‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: ${error}`);
    } finally {
      setIsLoading(false);
    }
  };

  const handleTestForm = () => {
    addResult("üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...");
    addResult("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É");
  };

  const handleFullDiagnosis = async () => {
    setIsLoading(true);
    addResult("üîç –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É API...");

    try {
      const diagnosticResults = await diagnoseApiConnection();
      diagnosticResults.forEach((result) => addResult(result));
    } catch (error) {
      addResult(`‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ${error}`);
    } finally {
      setIsLoading(false);
    }
  };

  const handleTestCustomEndpoint = async () => {
    if (!customEndpoint.trim()) {
      addResult("‚ùå –í–≤–µ–¥–∏—Ç–µ URL —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞");
      return;
    }

    setIsLoading(true);
    addResult(`üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç: ${customEndpoint}`);

    try {
      const result = await testSpecificEndpoint(customEndpoint);
      if (result.success) {
        addResult(`‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –°—Ç–∞—Ç—É—Å: ${result.status}`);
        addResult(`üìÑ –û—Ç–≤–µ—Ç: ${JSON.stringify(result.data)}`);
      } else {
        addResult(`‚ùå –≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –°—Ç–∞—Ç—É—Å: ${result.status}`);
        addResult(`üìÑ –û—à–∏–±–∫–∞: ${result.error}`);
        if (result.data) {
          addResult(`üìÑ –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(result.data)}`);
        }
      }
    } catch (error) {
      addResult(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error}`);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className={styles.tester}>
      <Typography variant="h3" className={styles.title}>
        üß™ –¢–µ—Å—Ç–µ—Ä API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      </Typography>

      <div className={styles.info}>
        <Typography variant="caption">
          <strong>API URL:</strong> http://localhost:8080/auth/api/v1
        </Typography>
        <Typography variant="caption">
          <strong>–≠–Ω–¥–ø–æ–∏–Ω—Ç:</strong> POST /register
        </Typography>
      </div>

      <div className={styles.buttons}>
        <Button
          variant="primary"
          size="medium"
          onClick={handleTestConnection}
          disabled={isLoading}
        >
          {isLoading ? "–¢–µ—Å—Ç–∏—Ä—É–µ–º..." : "üîç –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç"}
        </Button>

        <Button
          variant="primary"
          size="medium"
          onClick={handleFullDiagnosis}
          disabled={isLoading}
        >
          ü©∫ –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        </Button>

        <Button variant="secondary" size="medium" onClick={handleTestForm}>
          üìù –¢–µ—Å—Ç —Ñ–æ—Ä–º—ã
        </Button>

        <Button variant="text" size="medium" onClick={clearResults}>
          üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å
        </Button>
      </div>

      <div className={styles.customTest}>
        <Typography variant="caption" className={styles.customTestTitle}>
          –¢–µ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞:
        </Typography>
        <div className={styles.customTestControls}>
          <Input
            value={customEndpoint}
            onChange={(e) => setCustomEndpoint(e.target.value)}
            placeholder="http://localhost:8080/register"
            className={styles.endpointInput}
          />
          <Button
            variant="secondary"
            size="medium"
            onClick={handleTestCustomEndpoint}
            disabled={isLoading}
          >
            üéØ –¢–µ—Å—Ç
          </Button>
        </div>
      </div>

      <div className={styles.results}>
        <Typography variant="caption" className={styles.resultsTitle}>
          –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:
        </Typography>
        <div className={styles.resultsList}>
          {results.length === 0 ? (
            <Typography variant="small" className={styles.noResults}>
              –ù–∞–∂–º–∏—Ç–µ "–¢–µ—Å—Ç API" –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            </Typography>
          ) : (
            results.map((result, index) => (
              <div key={index} className={styles.resultItem}>
                <Typography variant="small">{result}</Typography>
              </div>
            ))
          )}
        </div>
      </div>

      <div className={styles.instructions}>
        <Typography variant="h3">üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</Typography>
        <ol className={styles.stepsList}>
          <li>
            <Typography variant="body">
              <strong>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±—ç–∫–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω</strong> –Ω–∞
              http://localhost:8080
            </Typography>
          </li>
          <li>
            <Typography variant="body">
              <strong>–ù–∞–∂–º–∏—Ç–µ "–¢–µ—Å—Ç API"</strong> –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            </Typography>
          </li>
          <li>
            <Typography variant="body">
              <strong>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</strong> —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É
              —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            </Typography>
          </li>
          <li>
            <Typography variant="body">
              <strong>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞</strong> –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤
            </Typography>
          </li>
        </ol>
      </div>
    </div>
  );
};
