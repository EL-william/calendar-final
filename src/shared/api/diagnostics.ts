import axios from "axios";

export async function diagnoseApiConnection() {
  const baseUrl = "http://localhost:8080";
  const results: string[] = [];

  console.log("üîç –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...");

  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
  try {
    console.log("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä...");
    const response = await fetch(`${baseUrl}`, { method: "GET" });
    results.push(
      `‚úÖ –°–µ—Ä–≤–µ—Ä –Ω–∞ ${baseUrl} –æ—Ç–≤–µ—á–∞–µ—Ç (—Å—Ç–∞—Ç—É—Å: ${response.status})`,
    );
  } catch (error) {
    results.push(`‚ùå –°–µ—Ä–≤–µ—Ä –Ω–∞ ${baseUrl} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error}`);
    return results;
  }

  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ API
  const possiblePaths = [
    "/auth/api/v1",
    "/api/v1",
    "/api",
    "/auth",
    "/auth/api/v1/register",
    "/api/v1/register",
    "/api/register",
    "/register",
  ];

  console.log("2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ API...");
  for (const path of possiblePaths) {
    try {
      const url = `${baseUrl}${path}`;
      const response = await fetch(url, {
        method: "GET",
        headers: { Accept: "application/json" },
      });

      results.push(`‚úÖ –ü—É—Ç—å ${path} –¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: ${response.status})`);

      // –ï—Å–ª–∏ —ç—Ç–æ —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
      if (response.ok) {
        try {
          const text = await response.text();
          if (text) {
            results.push(`üìÑ –û—Ç–≤–µ—Ç: ${text.substring(0, 200)}...`);
          }
        } catch (e) {
          results.push(`üìÑ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –Ω–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π`);
        }
      }
    } catch (error) {
      results.push(`‚ùå –ü—É—Ç—å ${path} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
    }
  }

  // 3. –ü—Ä–æ–±—É–µ–º POST –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–º–æ–∂–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  const registerPaths = [
    "/auth/api/v1/register",
    "/api/v1/register",
    "/api/register",
    "/register",
  ];

  console.log("3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...");
  for (const path of registerPaths) {
    try {
      const url = `${baseUrl}${path}`;
      const response = await axios.post(
        url,
        {
          email: "test@test.com",
          password: "test12345678",
          firstName: "Test",
          lastName: "User",
        },
        {
          headers: { "Content-Type": "application/json" },
          timeout: 5000,
        },
      );

      results.push(`‚úÖ POST ${path} —Ä–∞–±–æ—Ç–∞–µ—Ç! (—Å—Ç–∞—Ç—É—Å: ${response.status})`);
    } catch (error: any) {
      if (error.response) {
        results.push(
          `‚ö†Ô∏è POST ${path} –æ—Ç–≤–µ—Ç–∏–ª (—Å—Ç–∞—Ç—É—Å: ${error.response.status})`,
        );
        if (error.response.status !== 404) {
          results.push(`üìù –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç!`);
        }
      } else {
        results.push(`‚ùå POST ${path} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
      }
    }
  }

  return results;
}

export async function testSpecificEndpoint(endpoint: string) {
  try {
    console.log(`üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç: ${endpoint}`);

    const response = await axios.post(
      endpoint,
      {
        email: "test@example.com",
        password: "testpassword123",
        firstName: "Test",
        lastName: "User",
      },
      {
        headers: { "Content-Type": "application/json" },
        timeout: 10000,
      },
    );

    console.log("‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç:", response.data);
    return { success: true, data: response.data, status: response.status };
  } catch (error: any) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞:", error);
    return {
      success: false,
      error: error.message,
      status: error.response?.status,
      data: error.response?.data,
    };
  }
}
